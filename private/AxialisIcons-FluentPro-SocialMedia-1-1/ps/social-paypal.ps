%!PS-Adobe-3.0
%%Creator: cairo 1.15.6 (http://cairographics.org)
%%CreationDate: Tue Jan 08 12:29:15 2019
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 8x8mm 24 24 0 () ()
%%BoundingBox: 0 0 24 24
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/pdfmark where { pop globaldict /?pdfmark /exec load put }
    { globaldict begin /?pdfmark /pop load def /pdfmark
    /cleartomark load def end } ifelse
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_flush_ascii85_file { cairo_ascii85_file status { cairo_ascii85_file flushfile } if } def
/cairo_image { image cairo_flush_ascii85_file } def
/cairo_imagemask { imagemask cairo_flush_ascii85_file } def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 8x8mm
%%PageBoundingBox: 0 0 24 24
24 24 cairo_set_page_size
%%EndPageSetup
q 0 0 24 24 rectclip
1 0 0 -1 0 24 cm q
0.00392157 g
6.336 24.031 m 6.063 24.031 5.793 24.031 5.523 24.031 c 4.473 24.027 l 
4.477 22.527 l 5.527 22.531 l 6.242 22.531 6.98 22.531 7.703 22.527 c 8.156
 22.52 8.387 22.34 8.488 21.902 c 8.605 21.418 8.719 20.945 8.828 20.48 
c 9.012 19.715 9.188 18.996 9.367 18.223 c 9.707 16.754 10.789 16.547 11.691
 16.527 c 12.281 16.516 12.891 16.457 13.484 16.402 c 13.715 16.383 13.945
 16.359 14.172 16.34 c 16.469 16.152 18.355 15.418 19.781 14.16 c 21.82 
12.371 22.719 10.098 22.453 7.406 c 22.383 6.66 l 23.875 6.512 l 23.949 
7.258 l 24.258 10.414 23.16 13.191 20.773 15.285 c 19.102 16.762 16.922 
17.617 14.297 17.836 c 14.07 17.855 13.848 17.875 13.621 17.898 c 13.004
 17.953 12.363 18.012 11.723 18.027 c 10.945 18.043 10.91 18.195 10.828 
18.563 c 10.645 19.34 10.465 20.098 10.289 20.828 c 10.176 21.297 10.063
 21.766 9.949 22.246 c 9.688 23.352 8.855 24.016 7.719 24.027 c 7.262 24.031
 6.797 24.031 6.336 24.031 c h
2.785 21.102 m 2.438 21.102 2.109 21.098 1.789 21.098 c 1.141 21.094 0.656
 20.895 0.344 20.5 c 0.035 20.109 -0.051 19.594 0.094 18.969 c 1.535 12.691
 2.828 7.07 4.047 1.781 c 4.301 0.688 5.156 0 6.285 -0.008 c 6.965 -0.012
 9.086 -0.008 11.137 0 c 12.555 0.004 13.895 0.008 14.664 0.008 c 16.285
 0.008 17.957 0.715 19.25 1.949 c 20.523 3.16 21.039 4.797 20.824 6.953 
c 20.527 9.961 18.844 12.109 15.676 13.512 c 13.406 14.52 11.031 14.676 
8.805 14.699 c 8.738 14.699 8.672 14.699 8.605 14.699 c 8.496 14.699 8.398
 14.695 8.305 14.703 c 7.871 14.719 7.66 14.887 7.563 15.301 c 7.379 16.063
 7.199 16.84 7.023 17.59 c 6.902 18.133 6.773 18.695 6.641 19.246 c 6.359
 20.449 5.559 21.09 4.328 21.094 c 3.766 21.098 3.258 21.102 2.785 21.102
 c h
1.527 19.563 m 1.566 19.578 1.648 19.598 1.797 19.598 c 2.551 19.602 3.352
 19.602 4.32 19.594 c 4.848 19.594 5.059 19.422 5.18 18.902 c 5.309 18.355
 5.438 17.797 5.563 17.254 c 5.738 16.5 5.914 15.719 6.102 14.949 c 6.359
 13.883 7.137 13.246 8.242 13.203 c 8.371 13.195 8.492 13.199 8.613 13.199
 c 8.672 13.199 8.73 13.199 8.789 13.199 c 10.855 13.18 13.047 13.039 15.066
 12.141 c 17.734 10.961 19.09 9.262 19.332 6.805 c 19.5 5.117 19.145 3.922
 18.215 3.035 c 17.734 2.574 16.426 1.508 14.664 1.508 c 13.895 1.508 12.555
 1.504 11.133 1.5 c 9.086 1.492 6.969 1.488 6.297 1.492 c 5.863 1.496 5.605
 1.699 5.512 2.121 c 4.289 7.406 2.996 13.027 1.555 19.305 c 1.523 19.445
 1.523 19.523 1.527 19.563 c h
9.5 10.727 m 9.441 10.727 9.383 10.727 9.316 10.727 c 8.551 10.715 8.145
 10.402 7.941 10.141 c 7.637 9.758 7.555 9.25 7.695 8.629 c 7.82 8.086 7.945
 7.621 8.066 7.172 c 8.176 6.758 8.293 6.328 8.406 5.84 c 8.449 5.652 8.5
 5.457 8.594 5.254 c 8.961 4.488 9.586 4.055 10.309 4.063 c 10.383 4.063
 l 11.277 4.07 12.199 4.078 13.113 4.266 c 14.559 4.566 15.234 5.422 15.184
 6.891 c 15.117 8.797 13.91 10.086 11.781 10.527 c 11.152 10.656 10.477 
10.727 9.824 10.727 c 9.652 10.727 l 9.602 10.727 9.551 10.727 9.5 10.727
 c h
9.129 9.203 m 9.164 9.211 9.23 9.223 9.336 9.227 c 9.445 9.227 9.543 9.227
 9.648 9.227 c 9.824 9.227 l 10.379 9.227 10.949 9.168 11.48 9.059 c 12.922
 8.758 13.641 8.035 13.684 6.84 c 13.711 6.102 13.539 5.887 12.813 5.738
 c 12.043 5.578 11.191 5.57 10.367 5.563 c 10.293 5.563 l 10.129 5.563 9.996
 5.797 9.949 5.898 c 9.918 5.965 9.891 6.074 9.867 6.176 c 9.746 6.691 9.629
 7.133 9.516 7.563 c 9.391 8.016 9.273 8.449 9.16 8.961 c 9.129 9.086 9.129
 9.16 9.129 9.203 c h
9.09 9.188 m h
9.09 9.188 m f
Q Q
showpage
%%Trailer
%%EOF
